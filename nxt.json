{
    "ARGPLUGINS": {
        "sensorColor": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;var port = logo.parseArg(logo, turtle, conns[1]);\nif (validPort(logo, port, blk)) {\n    block.value = parseInt(logo, get('/color/' + port));\n};", 
        "blue": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;block.value = 2;", 
        "sensorUltrasonic": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;var port = logo.parseArg(logo, turtle, conns[1]);\nif (validPort(logo, port, blk)) {\n    block.value = parseInt(get(logo, '/ultrasonic/' + port));\n};", 
        "yellow": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;block.value = 4;", 
        "black": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;block.value = 1;", 
        "green": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;block.value = 3;", 
        "white": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;block.value = 6;", 
        "sensorLight": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;var port = logo.parseArg(logo, turtle, conns[1]);\nif (validPort(logo, port, blk)) {\n    block.value = parseInt(get(logo, '/light/' + port)) / 13 * 100;\n};", 
        "red": "var block = logo.blocks.blockList[blk];\nvar conns = block.connections;block.value = 5;"
    }, 
    "GLOBALS": "get = function (logo, url, blk) {\n    if (window.nxtURL === undefined) {\n        logo.errorMsg('You haven\\'t connected to the NXT yet', blk);\n        return '';\n    }\n    try {\n        request = new XMLHttpRequest();\n        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);\n        request.send(null);\n        return request.responseText;\n    } catch (e) {\n        logo.errorMsg('Error with NXT', blk);\n    }\n    return '';\n};\n\nvalidPort = function (logo, port, blk) {\n    if (0 < port <= 4) {\n        return true;\n    } else {\n        logo.errorMsg('Port must be from 1 to 4', blk);\n        return false;\n    }\n};\n\nvalidColor = function (logo, color, blk) {\n    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {\n        return true;\n    } else {\n        logo.errorMsg('Invalid color.  Use green, red, blue, all or none', blk);\n        return false;\n    }\n};\n\nvaildMotor = function (logo, motor, blk) {\n    if (['A', 'B', 'C'].indexOf(motor.toUpperCase()) !== -1) {\n        return true;\n    } else {\n        logo.errorMsg('Motor must be either A, B or C', blk);\n        return false;\n    }\n};\n\nvalidPower = function (logo, power, blk) {\n    if (-127 < power <= 128) {\n        return true;\n    } else {\n        logo.errorMsg('Power must be between -127 and 128', blk);\n        return false;\n    }\n};", 
    "PALETTEHIGHLIGHTCOLORS": {
        "NXT": "#ffb1b3"
    }, 
    "FLOWPLUGINS": {
        "colorLED": "console.log(logo);\nvar block = logo.blocks.blockList[blk];\nconsole.log(logo);\nvar conns = block.connections;var port = logo.parseArg(logo, turtle, conns[1]);\nvar color = logo.parseArg(logo, turtle, conns[2]).toLowerCase();\nif (validPort(logo, port, blk) && validColor(logo, color, blk)) {\n    get(logo, '/led/' + port + '/' + color);\n};", 
        "motorStop": "console.log(logo);\nvar block = logo.blocks.blockList[blk];\nconsole.log(logo);\nvar conns = block.connections;var motor = logo.parseArg(logo, turtle, conns[1]);\nif (vaildMotor(logo, motor, blk)) {\n    get(logo, '/motor/' + motor + '/stop');\n};", 
        "motorTurn": "console.log(logo);\nvar block = logo.blocks.blockList[blk];\nconsole.log(logo);\nvar conns = block.connections;var motor = logo.parseArg(logo, turtle, conns[1]);\nvar deg   = logo.parseArg(logo, turtle, conns[2]);\nif (vaildMotor(logo, motor, blk)) {\n    var power = 75;\n    if (deg < 0) {\n        deg = Math.abs(deg);\n        power = -75;\n    }\n    get(logo, '/motor/' + motor + '/turn/' + deg + '/' + power);\n};", 
        "connectToNxt": "console.log(logo);\nvar block = logo.blocks.blockList[blk];\nconsole.log(logo);\nvar conns = block.connections;window.nxtURL = logo.parseArg(logo, turtle, conns[1]);", 
        "motorStart": "console.log(logo);\nvar block = logo.blocks.blockList[blk];\nconsole.log(logo);\nvar conns = block.connections;var motor = logo.parseArg(logo, turtle, conns[1]);\nvar power = logo.parseArg(logo, turtle, conns[2]);\nif (vaildMotor(logo, motor, blk) && validPower(logo, power, blk)) {\n    get(logo, '/motor/' + motor + '/start/' + power);\n};", 
        "motorIdle": "console.log(logo);\nvar block = logo.blocks.blockList[blk];\nconsole.log(logo);\nvar conns = block.connections;console.log(logo)\nvar motor = logo.parseArg(logo, turtle, conns[1]);\nif (vaildMotor(logo, motor, blk)) {\n    get(logo, '/motor/' + motor + '/idle');\n};"
    }, 
    "PALETTEPLUGINS": {
        "NXT": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   version=\"1.1\"\n   width=\"55\"\n   height=\"55\"\n   viewBox=\"0 0 55 55\"\n   id=\"svg2\"\n   xml:space=\"preserve\"><metadata\n     id=\"metadata15\"><rdf:RDF><cc:Work\n         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n     id=\"defs13\" /><text\n     x=\"23.592768\"\n     y=\"56.724373\"\n     id=\"text3014\"\n     xml:space=\"preserve\"\n     style=\"font-size:43.07724762px;font-style:normal;font-weight:bold;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Sans;-inkscape-font-specification:Sans Bold\"><tspan\n       x=\"23.592768\"\n       y=\"56.724373\"\n       id=\"tspan3016\" /></text>\n<rect\n     width=\"42.049648\"\n     height=\"7.9125671\"\n     x=\"6.5348568\"\n     y=\"6.0882487\"\n     id=\"rect4439\"\n     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /><rect\n     width=\"42.049648\"\n     height=\"7.9125671\"\n     x=\"6.2629428\"\n     y=\"-14.245615\"\n     transform=\"matrix(-0.00502678,0.99998737,-0.99998737,-0.00502678,0,0)\"\n     id=\"rect4439-1\"\n     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /><rect\n     width=\"41.827587\"\n     height=\"7.9125657\"\n     x=\"6.0901551\"\n     y=\"-48.83456\"\n     transform=\"matrix(-0.00505346,0.99998723,-0.9999875,-0.00500024,0,0)\"\n     id=\"rect4439-1-5\"\n     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /><rect\n     width=\"40.675552\"\n     height=\"7.9125671\"\n     x=\"6.5348568\"\n     y=\"40.33836\"\n     id=\"rect4439-6\"\n     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /><rect\n     width=\"9.9472275\"\n     height=\"9.7211542\"\n     x=\"22.359989\"\n     y=\"22.13946\"\n     id=\"rect4556\"\n     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /></svg>"
    }, 
    "BLOCKPLUGINS": {
        "colorLED": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('colorLED');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['colorLED'] = block;\nblock.twoArgBlock();\nblock.dockTypes[1] = 'numberinin';\nblock.dockTypes[2] = 'anyin';\nblock.defaults.push(3, 'red');\nblock.staticLabels.push('LED', 'port', 'color');", 
        "sensorTouch": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('sensorTouch');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['sensorTouch'] = block;\nblock.booleanOneArgBlock();\nblock.dockTypes[1] = 'numberin';\nblock.defaults.push(2);\nblock.staticLabels.push('touch');\n//( arg:sensorTouch (//\nvar port = logo.parseArg(logo, turtle, conns[1]);\nif (validPort(logo, port, blk)) {\n    if (get('logo, /touch/' + port) === '1') {\n        block.value = true;\n    } else {\n        block.value = false;\n    };\n};", 
        "sensorUltrasonic": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('sensorUltrasonic');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['sensorUltrasonic'] = block;\nblock.oneArgMathBlock();\nblock.defaults.push(1);\nblock.staticLabels.push('ultrasonic');", 
        "sensorColor": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('sensorColor');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['sensorColor'] = block;\nblock.oneArgMathBlock();\nblock.defaults.push(3);\nblock.staticLabels.push('color');", 
        "motorStop": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('motorStop');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['motorStop'] = block;\nblock.oneArgBlock();\nblock.dockTypes[1] = 'anyin';\nblock.defaults.push('A');\nblock.staticLabels.push('stop');", 
        "motorTurn": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('motorTurn');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['motorTurn'] = block;\nblock.twoArgBlock();\nblock.dockTypes[1] = 'anyin';\nblock.defaults.push('A', 360);\nblock.staticLabels.push('turn', 'motor', 'deg');", 
        "connectToNxt": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('connectToNxt');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['connectToNxt'] = block;\nblock.oneArgBlock();\nblock.dockTypes[1] = 'anyin';\nblock.defaults.push('localhost');\nblock.staticLabels.push('connect');", 
        "yellow": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};staticBlock('yellow')", 
        "blue": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};staticBlock('blue')", 
        "motorStart": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('motorStart');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['motorStart'] = block;\nblock.twoArgBlock();\nblock.dockTypes[1] = 'anyin';\nblock.defaults.push('A', 100);\nblock.staticLabels.push('start', 'motor', 'power');", 
        "black": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};staticBlock('black')", 
        "green": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};staticBlock('green')", 
        "white": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};staticBlock('white')", 
        "motorIdle": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('motorIdle');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['motorIdle'] = block;\nblock.oneArgBlock();\nblock.dockTypes[1] = 'anyin';\nblock.defaults.push('A');\nblock.staticLabels.push('idle');", 
        "sensorLight": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};var block = new ProtoBlock('sensorLight');\nblock.palette = palettes.dict['NXT'];\nblocks.protoBlockDict['sensorLight'] = block;\nblock.oneArgMathBlock();\nblock.defaults.push(3);\nblock.staticLabels.push('lightness');", 
        "red": "var staticBlock = function (name) {\n    var block = new ProtoBlock(name);\n    block.palette = palettes.dict['NXT'];\n    blocks.protoBlockDict[name] = block;\n    block.parameterBlock();\n    block.staticLabels.push(name);\n};staticBlock('red')"
    }, 
    "PALETTEFILLCOLORS": {
        "NXT": "#ff0066"
    }, 
    "PALETTESTROKECOLORS": {
        "NXT": "#ef003e"
    }
}
