{"ARGPLUGINS": {"sensorTouch": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var port = parseArg(activity, turtle, conns[1]);if (validPort(port, blk)) {    if (get('/touch/' + port) === '1') {        block.value = true;    } else {        block.value = false;    };};", "sensorColor": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var port = parseArg(activity, turtle, conns[1]);if (validPort(port, blk)) {    block.value = parseInt(get('/color/' + port));};", "sensorUltrasonic": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var port = parseArg(activity, turtle, conns[1]);if (validPort(port, blk)) {    block.value = parseInt(get('/ultrasonic/' + port));};", "blue": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;block.value = 2;", "yellow": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;block.value = 4;", "black": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;block.value = 1;", "green": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;block.value = 3;", "white": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;block.value = 6;", "sensorLight": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var port = parseArg(activity, turtle, conns[1]);if (validPort(port, blk)) {    block.value = parseInt(get('/light/' + port)) / 13 * 100;};", "red": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;block.value = 5;"}, "FLOWPLUGINS": {"colorLED": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var vaildMotor = function (motor, blk) {    if (['A', 'B', 'C'].indexOf(motor.toUpperCase()) !== -1) {        return true;    } else {        errorMsg('Motor must be either A, B or C', blk);        return false;    }};var validPower = function (power, blk) {    if (-127 < power <= 128) {        return true;    } else {        errorMsg('Power must be between -127 and 128', blk);        return false;    }};var port = parseArg(activity, turtle, conns[1]);var color = parseArg(activity, turtle, conns[2]).toLowerCase();if (validPort(port, blk) && validColor(color, blk)) {    get('/led/' + port + '/' + color);};", "motorStop": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var vaildMotor = function (motor, blk) {    if (['A', 'B', 'C'].indexOf(motor.toUpperCase()) !== -1) {        return true;    } else {        errorMsg('Motor must be either A, B or C', blk);        return false;    }};var validPower = function (power, blk) {    if (-127 < power <= 128) {        return true;    } else {        errorMsg('Power must be between -127 and 128', blk);        return false;    }};var motor = parseArg(activity, turtle, conns[1]);if (vaildMotor(motor, blk)) {    get('/motor/' + motor + '/stop');};", "motorTurn": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var vaildMotor = function (motor, blk) {    if (['A', 'B', 'C'].indexOf(motor.toUpperCase()) !== -1) {        return true;    } else {        errorMsg('Motor must be either A, B or C', blk);        return false;    }};var validPower = function (power, blk) {    if (-127 < power <= 128) {        return true;    } else {        errorMsg('Power must be between -127 and 128', blk);        return false;    }};var motor = parseArg(activity, turtle, conns[1]);var deg   = parseArg(activity, turtle, conns[2]);if (vaildMotor(motor, blk)) {    var power = 75;    if (deg < 0) {        deg = Math.abs(deg);        power = -75;    }    get('/motor/' + motor + '/turn/' + deg + '/' + power);};", "connectToNxt": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var vaildMotor = function (motor, blk) {    if (['A', 'B', 'C'].indexOf(motor.toUpperCase()) !== -1) {        return true;    } else {        errorMsg('Motor must be either A, B or C', blk);        return false;    }};var validPower = function (power, blk) {    if (-127 < power <= 128) {        return true;    } else {        errorMsg('Power must be between -127 and 128', blk);        return false;    }};window.nxtURL = parseArg(activity, turtle, conns[1]);", "motorStart": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var vaildMotor = function (motor, blk) {    if (['A', 'B', 'C'].indexOf(motor.toUpperCase()) !== -1) {        return true;    } else {        errorMsg('Motor must be either A, B or C', blk);        return false;    }};var validPower = function (power, blk) {    if (-127 < power <= 128) {        return true;    } else {        errorMsg('Power must be between -127 and 128', blk);        return false;    }};var motor = parseArg(activity, turtle, conns[1]);var power = parseArg(activity, turtle, conns[2]);if (vaildMotor(motor, blk) && validPower(power, blk)) {    get('/motor/' + motor + '/start/' + power);};", "motorIdle": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var block = blocks.blockList[blk];var conns = block.connections;var vaildMotor = function (motor, blk) {    if (['A', 'B', 'C'].indexOf(motor.toUpperCase()) !== -1) {        return true;    } else {        errorMsg('Motor must be either A, B or C', blk);        return false;    }};var validPower = function (power, blk) {    if (-127 < power <= 128) {        return true;    } else {        errorMsg('Power must be between -127 and 128', blk);        return false;    }};var motor = parseArg(activity, turtle, conns[1]);if (vaildMotor(motor, blk)) {    get('/motor/' + motor + '/idle');};"}, "PALETTEHIGHLIGHTCOLORS": {"NXT": "#ffb1b3"}, "PALETTEPLUGINS": {"NXT": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!-- Created with Inkscape (http://www.inkscape.org/) --><svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   version=\"1.1\"   width=\"55\"   height=\"55\"   viewBox=\"0 0 55 55\"   id=\"svg2\"   xml:space=\"preserve\"><metadata     id=\"metadata15\"><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs     id=\"defs13\" /><text     x=\"23.592768\"     y=\"56.724373\"     id=\"text3014\"     xml:space=\"preserve\"     style=\"font-size:43.07724762px;font-style:normal;font-weight:bold;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Sans;-inkscape-font-specification:Sans Bold\"><tspan       x=\"23.592768\"       y=\"56.724373\"       id=\"tspan3016\" /></text><rect     width=\"42.049648\"     height=\"7.9125671\"     x=\"6.5348568\"     y=\"6.0882487\"     id=\"rect4439\"     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /><rect     width=\"42.049648\"     height=\"7.9125671\"     x=\"6.2629428\"     y=\"-14.245615\"     transform=\"matrix(-0.00502678,0.99998737,-0.99998737,-0.00502678,0,0)\"     id=\"rect4439-1\"     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /><rect     width=\"41.827587\"     height=\"7.9125657\"     x=\"6.0901551\"     y=\"-48.83456\"     transform=\"matrix(-0.00505346,0.99998723,-0.9999875,-0.00500024,0,0)\"     id=\"rect4439-1-5\"     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /><rect     width=\"40.675552\"     height=\"7.9125671\"     x=\"6.5348568\"     y=\"40.33836\"     id=\"rect4439-6\"     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /><rect     width=\"9.9472275\"     height=\"9.7211542\"     x=\"22.359989\"     y=\"22.13946\"     id=\"rect4556\"     style=\"fill:#ffffff;fill-opacity:1;fill-rule:evenodd;stroke:none\" /></svg>"}, "BLOCKPLUGINS": {"colorLED": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('colorLED');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['colorLED'] = block;block.twoArgBlock();block.docks[1][2] = 'numberinin';block.docks[2][2] = 'anyin';block.defaults.push(3, 'red');block.staticLabels.push('LED', 'port', 'color');", "sensorTouch": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('sensorTouch');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['sensorTouch'] = block;block.booleanOneArgBlock();block.docks[1][2] = 'numberin';block.defaults.push(2);block.staticLabels.push('touch');", "sensorUltrasonic": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('sensorUltrasonic');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['sensorUltrasonic'] = block;block.oneArgMathBlock();block.defaults.push(1);block.staticLabels.push('ultrasonic');", "sensorColor": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('sensorColor');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['sensorColor'] = block;block.oneArgMathBlock();block.defaults.push(3);block.staticLabels.push('color');", "motorStop": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('motorStop');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['motorStop'] = block;block.oneArgBlock();block.docks[1][2] = 'anyin';block.defaults.push('A');block.staticLabels.push('stop');", "motorTurn": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('motorTurn');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['motorTurn'] = block;block.twoArgBlock();block.docks[1][2] = 'anyin';block.defaults.push('A', 360);block.staticLabels.push('turn', 'motor', 'deg');", "connectToNxt": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('connectToNxt');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['connectToNxt'] = block;block.oneArgBlock();block.docks[1][2] = 'anyin';block.defaults.push('localhost');block.staticLabels.push('connect');", "yellow": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};staticBlock('yellow')", "blue": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};staticBlock('blue')", "motorStart": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('motorStart');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['motorStart'] = block;block.twoArgBlock();block.docks[1][2] = 'anyin';block.defaults.push('A', 100);block.staticLabels.push('start', 'motor', 'power');", "black": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};staticBlock('black')", "green": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};staticBlock('green')", "white": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};staticBlock('white')", "motorIdle": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('motorIdle');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['motorIdle'] = block;block.oneArgBlock();block.docks[1][2] = 'anyin';block.defaults.push('A');block.staticLabels.push('idle');", "sensorLight": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};var block = new ProtoBlock('sensorLight');block.palette = palettes.dict['NXT'];blocks.protoBlockDict['sensorLight'] = block;block.oneArgMathBlock();block.defaults.push(3);block.staticLabels.push('lightness');", "red": "var get = function (url, blk) {    if (window.nxtURL === undefined) {        errorMsg('You haven\\'t connected to the NXT yet', blk);        return '';    }    try {        var request = new XMLHttpRequest();        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);        request.send(null);        return request.responseText;    } catch (e) {        errorMsg('Error with NXT', blk);    }    return '';};var validPort = function (port, blk) {    if (0 < port <= 4) {        return true;    } else {        errorMsg('Port must be from 1 to 4', blk);        return false;    }};var validColor = function (color, blk) {    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {        return true;    } else {        errorMsg('Invalid color.  Use green, red, blue, all or none', blk);        return false;    }};var staticBlock = function (name) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['NXT'];    blocks.protoBlockDict[name] = block;    block.parameterBlock();    block.staticLabels.push(name);};staticBlock('red')"}, "PALETTEFILLCOLORS": {"NXT": "#ff0066"}, "PALETTESTROKECOLORS": {"NXT": "#ef003e"}}
