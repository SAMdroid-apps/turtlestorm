//* comment *//

Copyright (C) 2015 Sam Parkinson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

//* globals *//

var get = function (logo, url, blk) {
    if (window.nxtURL === undefined) {
        logo.errorMsg('You haven\'t connected to the NXT yet', blk);
        return '';
    }
    try {
        var request = new XMLHttpRequest();
        request.open('GET', 'http://' + window.nxtURL + ':5002' +  url, false);
        request.send(null);
        return request.responseText;
    } catch (e) {
        logo.errorMsg('Error with NXT', blk);
    }
    return '';
};

var validPort = function (logo, port, blk) {
    if (0 < port <= 4) {
        return true;
    } else {
        logo.errorMsg('Port must be from 1 to 4', blk);
        return false;
    }
};

var validColor = function (logo, color, blk) {
    if (['red', 'green', 'blue', 'none', 'all'].indexOf(color) !== -1) {
        return true;
    } else {
        logo.errorMsg('Invalid color.  Use green, red, blue, all or none', blk);
        return false;
    }
};

var vaildMotor = function (logo, motor, blk) {
    if (['A', 'B', 'C'].indexOf(motor.toUpperCase()) !== -1) {
        return true;
    } else {
        logo.errorMsg('Motor must be either A, B or C', blk);
        return false;
    }
};

var validPower = function (logo, power, blk) {
    if (-127 < power <= 128) {
        return true;
    } else {
        logo.errorMsg('Power must be between -127 and 128', blk);
        return false;
    }
};

//* flow-globals *//

console.log(logo);
var block = logo.blocks.blockList[blk];
console.log(logo);
var conns = block.connections;

//* arg-globals *//

var block = logo.blocks.blockList[blk];
var conns = block.connections;

//* block-globals *//

var staticBlock = function (name) {
    var block = new ProtoBlock(name);
    block.palette = palettes.dict['NXT'];
    blocks.protoBlockDict[name] = block;
    block.parameterBlock();
    block.staticLabels.push(name);
};

//* block:connectToNxt *//
var block = new ProtoBlock('connectToNxt');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['connectToNxt'] = block;
block.oneArgBlock();
block.dockTypes[1] = 'anyin';
block.defaults.push('localhost');
block.staticLabels.push('connect');
//* flow:connectToNxt *//
window.nxtURL = logo.parseArg(logo, turtle, conns[1]);

//* block:motorStart *//
var block = new ProtoBlock('motorStart');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['motorStart'] = block;
block.twoArgBlock();
block.dockTypes[1] = 'anyin';
block.defaults.push('A', 100);
block.staticLabels.push('start', 'motor', 'power');
//* flow:motorStart *//
var motor = logo.parseArg(logo, turtle, conns[1]);
var power = logo.parseArg(logo, turtle, conns[2]);
if (vaildMotor(logo, motor, blk) && validPower(logo, power, blk)) {
    get(logo, '/motor/' + motor + '/start/' + power);
};

//* block:motorTurn *//
var block = new ProtoBlock('motorTurn');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['motorTurn'] = block;
block.twoArgBlock();
block.dockTypes[1] = 'anyin';
block.defaults.push('A', 360);
block.staticLabels.push('turn', 'motor', 'deg');
//* flow:motorTurn *//
var motor = logo.parseArg(logo, turtle, conns[1]);
var deg   = logo.parseArg(logo, turtle, conns[2]);
if (vaildMotor(logo, motor, blk)) {
    var power = 75;
    if (deg < 0) {
        deg = Math.abs(deg);
        power = -75;
    }
    get(logo, '/motor/' + motor + '/turn/' + deg + '/' + power);
};

//* block:motorStop *//
var block = new ProtoBlock('motorStop');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['motorStop'] = block;
block.oneArgBlock();
block.dockTypes[1] = 'anyin';
block.defaults.push('A');
block.staticLabels.push('stop');
//* flow:motorStop *//
var motor = logo.parseArg(logo, turtle, conns[1]);
if (vaildMotor(logo, motor, blk)) {
    get(logo, '/motor/' + motor + '/stop');
};

//* block:motorIdle *//
var block = new ProtoBlock('motorIdle');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['motorIdle'] = block;
block.oneArgBlock();
block.dockTypes[1] = 'anyin';
block.defaults.push('A');
block.staticLabels.push('idle');
//* flow:motorIdle *//
console.log(logo)
var motor = logo.parseArg(logo, turtle, conns[1]);
if (vaildMotor(logo, motor, blk)) {
    get(logo, '/motor/' + motor + '/idle');
};

//* block:colorLED *//
var block = new ProtoBlock('colorLED');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['colorLED'] = block;
block.twoArgBlock();
block.dockTypes[1] = 'numberinin';
block.dockTypes[2] = 'anyin';
block.defaults.push(3, 'red');
block.staticLabels.push('LED', 'port', 'color');
//* flow:colorLED *//
var port = logo.parseArg(logo, turtle, conns[1]);
var color = logo.parseArg(logo, turtle, conns[2]).toLowerCase();
if (validPort(logo, port, blk) && validColor(logo, color, blk)) {
    get(logo, '/led/' + port + '/' + color);
};


//* block:sensorTouch *//
var block = new ProtoBlock('sensorTouch');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['sensorTouch'] = block;
block.booleanOneArgBlock();
block.dockTypes[1] = 'numberin';
block.defaults.push(2);
block.staticLabels.push('touch');
//( arg:sensorTouch (//
var port = logo.parseArg(logo, turtle, conns[1]);
if (validPort(logo, port, blk)) {
    if (get('logo, /touch/' + port) === '1') {
        block.value = true;
    } else {
        block.value = false;
    };
};

//* block:sensorUltrasonic *//
var block = new ProtoBlock('sensorUltrasonic');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['sensorUltrasonic'] = block;
block.oneArgMathBlock();
block.defaults.push(1);
block.staticLabels.push('ultrasonic');
//* arg:sensorUltrasonic *//
var port = logo.parseArg(logo, turtle, conns[1]);
if (validPort(logo, port, blk)) {
    block.value = parseInt(get(logo, '/ultrasonic/' + port));
};

//* block:sensorLight *//
var block = new ProtoBlock('sensorLight');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['sensorLight'] = block;
block.oneArgMathBlock();
block.defaults.push(3);
block.staticLabels.push('lightness');
//* arg:sensorLight *//
var port = logo.parseArg(logo, turtle, conns[1]);
if (validPort(logo, port, blk)) {
    block.value = parseInt(get(logo, '/light/' + port)) / 13 * 100;
};

//* comment *//
This only works in the interactive shell for some reason

/* block:sensorLightReflect *//
var block = new ProtoBlock('sensorLightReflect');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['sensorLightReflect'] = block;
block.twoArgMathBlock();
block.dockTypes[1] = 'anyin';
block.defaults.push('red', 3);
block.staticLabels.push('reflect', 'color', 'port');
/* arg:sensorLightReflect *//
var color = logo.parseArg(logo, turtle, conns[1]);
var port = logo.parseArg(logo, turtle, conns[2]);
if (validPort(logo, port, blk) && validColor(logo, color, blk)) {
    block.value = parseInt(get(logo, '/light/' + port + '/reflect/' + color))
                  / 10;
};

//* block:sensorColor *//
var block = new ProtoBlock('sensorColor');
block.palette = palettes.dict['NXT'];
blocks.protoBlockDict['sensorColor'] = block;
block.oneArgMathBlock();
block.defaults.push(3);
block.staticLabels.push('color');
//* arg:sensorColor *//
var port = logo.parseArg(logo, turtle, conns[1]);
if (validPort(logo, port, blk)) {
    block.value = parseInt(logo, get('/color/' + port));
};

//* block:black *// staticBlock('black')
//* arg:black *// block.value = 1;
//* block:blue *// staticBlock('blue')
//* arg:blue *// block.value = 2;
//* block:green *// staticBlock('green')
//* arg:green *// block.value = 3;
//* block:yellow *// staticBlock('yellow')
//* arg:yellow *// block.value = 4;
//* block:red *// staticBlock('red')
//* arg:red *// block.value = 5;
//* block:white *// staticBlock('white')
//* arg:white *// block.value = 6;


//* palette-icon:NXT *//

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg height="55" viewBox="0 0 55 55" width="55" version="1.1" xmlns="http://www.w3.org/2000/svg">
 <metadata id="metadata15"/>
 <text x="23.593" font-size="43.08" letter-spacing="0" y="56.724" font-weight="bold" line-height="125%" fill="#ffffff" id="text3014" word-spacing="0" font-family="Sans"><tspan x="23.593" y="56.724" id="tspan3016"/>
 </text>
 <rect x="6.535" y="6.088" fill="#ffffff" fill-rule="evenodd" height="7.913" id="rect4439" width="42.05"/>
 <rect x="6.263" y="-14.246" fill="#ffffff" fill-rule="evenodd" height="7.913" id="rect4439-1" width="42.05" transform="matrix(-0.00503 0.99999 -0.99999 -0.00503 0 0)"/>
 <rect x="6.09" y="-48.835" fill="#ffffff" fill-rule="evenodd" height="7.913" id="rect4439-1-5" width="41.828" transform="matrix(-0.00505 0.99999 -0.99999 -0.005 0 0)"/>
 <rect x="6.535" y="40.34" fill="#ffffff" fill-rule="evenodd" height="7.913" id="rect4439-6" width="40.676"/>
 <rect x="22.36" y="22.14" fill="#ffffff" fill-rule="evenodd" height="9.721" id="rect4556" width="9.947"/>
</svg>

//* palette-fill:NXT *// #ff0066
//* palette-stroke:NXT *// #ef003e
//* palette-highlight:NXT *// #ffb1b3
